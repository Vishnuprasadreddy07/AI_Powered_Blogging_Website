{"ast":null,"code":"import React from \"react\";\nimport Data from \"../../Postsdata.json\";\nclass Post {\n  constructor(id, title, body, author, topic, comments) {\n    this.parseData = async () => {\n      for (let i = 0; i < Data.length; i++) {\n        this.state.push(Data[i]);\n      }\n    };\n    this.id = id;\n    this.title = title;\n    this.body = body;\n    this.status = author;\n    this.topic = topic;\n    this.comments = comments;\n  }\n  async getPosts() {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/posts\"); // Change to port 5000\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n      const data = await response.json();\n      console.log(data);\n      const posts = data.map(post => new Post(post.id, post.title, post.body, post.author, post.topic, post.comments));\n      return posts;\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      return []; // Return an empty array or handle the error as appropriate\n    }\n  }\n  async getPostsByTopic(topic) {\n    try {\n      const response = await fetch(\"http://localhost:4000/getData\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n      const data = await response.json();\n      const fp = [];\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].topic === topic) {\n          fp.push(new Post(data[i].id, data[i].title, data[i].body, data[i].author, data[i].topic, data[i].comments));\n        }\n      }\n      return fp;\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      return []; // Return an empty array or handle the error as appropriate\n    }\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","Data","Post","constructor","id","title","body","author","topic","comments","parseData","i","length","state","push","status","getPosts","response","fetch","ok","Error","data","json","console","log","posts","map","post","error","getPostsByTopic","method","headers","fp"],"sources":["D:/Blogging-Applicaton-main old/Blogging-Applicaton-main/Source code/Frontend/my-react-project/src/components/classes/Post.js"],"sourcesContent":["import React from \"react\";\r\nimport Data from \"../../Postsdata.json\";\r\n\r\nclass Post {\r\n  constructor(id, title, body, author, topic, comments) {\r\n    this.id = id;\r\n    this.title = title;\r\n    this.body = body;\r\n    this.status = author;\r\n    this.topic = topic;\r\n    this.comments = comments;\r\n  }\r\n\r\n  parseData = async () => {\r\n    for (let i = 0; i < Data.length; i++) {\r\n      this.state.push(Data[i]);\r\n    }\r\n  };\r\n\r\n  async getPosts() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/posts\");  // Change to port 5000\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data\");\r\n      }\r\n      const data = await response.json();\r\n      console.log(data);\r\n      const posts = data.map(\r\n        (post) =>\r\n          new Post(\r\n            post.id,\r\n            post.title,\r\n            post.body,\r\n            post.author,\r\n            post.topic,\r\n            post.comments\r\n          )\r\n      );\r\n      return posts;\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts:\", error);\r\n      return []; // Return an empty array or handle the error as appropriate\r\n    }\r\n  }\r\n\r\n  async getPostsByTopic(topic) {\r\n    try {\r\n      const response = await fetch(\"http://localhost:4000/getData\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const fp = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (data[i].topic === topic) {\r\n          fp.push(\r\n            new Post(\r\n              data[i].id,\r\n              data[i].title,\r\n              data[i].body,\r\n              data[i].author,\r\n              data[i].topic,\r\n              data[i].comments\r\n            )\r\n          );\r\n        }\r\n      }\r\n      return fp;\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts:\", error);\r\n      return []; // Return an empty array or handle the error as appropriate\r\n    }\r\n  }\r\n}\r\n\r\nexport default Post;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}