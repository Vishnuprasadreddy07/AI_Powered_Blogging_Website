{"ast":null,"code":"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst axios = require(\"axios\");\nconst nodemailer = require(\"nodemailer\");\nconst {\n  OpenAI\n} = require(\"openai\");\nconst app = express();\n\n// Connect to MongoDB\nmongoose.connect(\"mongodb://127.0.0.1:27017/myNewDatabase\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"Connected to MongoDB\")).catch(err => console.error(\"MongoDB connection error:\", err));\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.json());\nconst openai = new OpenAI({\n  apiKey: \"\"\n}); // Enter your OpenAI key here\nconst SERPAPI_API_KEY = \"bb0414e26bbb069854f8dbed7af5603304659662d59e8bee64273e41c4091811\";\n\n// Define Post Schema and Model\nconst postSchema = new mongoose.Schema({\n  id: {\n    type: Number,\n    required: true,\n    unique: true\n  },\n  title: {\n    type: String,\n    required: true\n  },\n  body: {\n    type: String,\n    required: true\n  },\n  author: {\n    type: String,\n    required: true\n  },\n  topic: {\n    type: String,\n    required: true\n  },\n  comments: [{\n    id: {\n      type: Number,\n      required: true\n    },\n    text: {\n      type: String,\n      required: true\n    },\n    author: {\n      type: String,\n      required: true\n    }\n  }],\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst Post = mongoose.model(\"Post\", postSchema);\n\n// Fetch all posts\napp.get(\"/api/posts\", async (req, res) => {\n  try {\n    const posts = await Post.find();\n    res.json(posts);\n  } catch (error) {\n    res.status(500).json({\n      message: \"Error fetching posts\",\n      error: error\n    });\n  }\n});\n\n// Insert a new post\napp.post(\"/api/newpost\", async (req, res) => {\n  try {\n    const newPost = new Post(req.body);\n    await newPost.save();\n    res.json({\n      message: \"Post added successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: \"Error inserting post\",\n      error: error\n    });\n  }\n});\n\n// Search for posts\napp.post(\"/api/search\", async (req, res) => {\n  try {\n    const {\n      searchQuery\n    } = req.body;\n    const results = await Post.find({\n      title: {\n        $regex: searchQuery,\n        $options: \"i\"\n      }\n    });\n    res.json(results);\n  } catch (error) {\n    res.status(500).json({\n      message: \"Error searching posts\",\n      error: error\n    });\n  }\n});\n\n// Email Notification Function\nasync function emailSubscribed(topic, title, email, content) {\n  const transporter = nodemailer.createTransport({\n    service: \"gmail\",\n    auth: {\n      user: \"your-email@gmail.com\",\n      pass: \"your-app-password\"\n    }\n  });\n  const htmlTemplate = `<h1>New post on \"${topic}\"</h1><h4>${title}</h4><p>${content}...</p><a href=\"http://localhost:3000/\">Read more</a>`;\n  const mailOptions = {\n    from: \"your-email@gmail.com\",\n    to: email,\n    subject: \"New post on subscribed topic \" + topic,\n    html: htmlTemplate\n  };\n  transporter.sendMail(mailOptions, function (error, info) {\n    if (error) {\n      console.log(error);\n    } else {\n      console.log(\"Email sent: \" + info.response);\n    }\n  });\n}\n\n// Generate AI-based Reply\napp.post(\"/api/generate-reply\", async (req, res) => {\n  try {\n    const {\n      post\n    } = req.body;\n    const messages = [{\n      role: \"system\",\n      content: \"You are a reply generator.\"\n    }, {\n      role: \"user\",\n      content: `Generate a reply in 10 words for post title: ${post.title}\\n\\n and content: ${post.body}`\n    }];\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo-16k\",\n      messages: messages,\n      max_tokens: 30,\n      temperature: 0.5,\n      top_p: 1\n    });\n    const generatedReply = response.choices[0].message.content;\n    res.json({\n      generatedReply\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n});\n\n// Start the Express server\nconst port = 5000;\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","bodyParser","axios","nodemailer","OpenAI","app","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","use","json","openai","apiKey","SERPAPI_API_KEY","postSchema","Schema","id","type","Number","required","unique","title","String","body","author","topic","comments","text","date","Date","default","now","Post","model","get","req","res","posts","find","status","message","post","newPost","save","searchQuery","results","$regex","$options","emailSubscribed","email","content","transporter","createTransport","service","auth","user","pass","htmlTemplate","mailOptions","from","to","subject","html","sendMail","info","response","messages","role","chat","completions","create","max_tokens","temperature","top_p","generatedReply","choices","port","listen"],"sources":["D:/Blogging-Applicaton-main old/Blogging-Applicaton-main/Source code/Frontend/my-react-project/src/components/Header.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst axios = require(\"axios\");\r\nconst nodemailer = require(\"nodemailer\");\r\nconst { OpenAI } = require(\"openai\");\r\nconst app = express();\r\n\r\n// Connect to MongoDB\r\nmongoose\r\n  .connect(\"mongodb://127.0.0.1:27017/myNewDatabase\", {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  })\r\n  .then(() => console.log(\"Connected to MongoDB\"))\r\n  .catch((err) => console.error(\"MongoDB connection error:\", err));\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(bodyParser.json());\r\n\r\nconst openai = new OpenAI({ apiKey: \"\" }); // Enter your OpenAI key here\r\nconst SERPAPI_API_KEY = \"bb0414e26bbb069854f8dbed7af5603304659662d59e8bee64273e41c4091811\";\r\n\r\n// Define Post Schema and Model\r\nconst postSchema = new mongoose.Schema({\r\n  id: { type: Number, required: true, unique: true },\r\n  title: { type: String, required: true },\r\n  body: { type: String, required: true },\r\n  author: { type: String, required: true },\r\n  topic: { type: String, required: true },\r\n  comments: [\r\n    {\r\n      id: { type: Number, required: true },\r\n      text: { type: String, required: true },\r\n      author: { type: String, required: true },\r\n    },\r\n  ],\r\n  date: { type: Date, default: Date.now },\r\n});\r\n\r\nconst Post = mongoose.model(\"Post\", postSchema);\r\n\r\n// Fetch all posts\r\napp.get(\"/api/posts\", async (req, res) => {\r\n  try {\r\n    const posts = await Post.find();\r\n    res.json(posts);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error fetching posts\", error: error });\r\n  }\r\n});\r\n\r\n// Insert a new post\r\napp.post(\"/api/newpost\", async (req, res) => {\r\n  try {\r\n    const newPost = new Post(req.body);\r\n    await newPost.save();\r\n    res.json({ message: \"Post added successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error inserting post\", error: error });\r\n  }\r\n});\r\n\r\n// Search for posts\r\napp.post(\"/api/search\", async (req, res) => {\r\n  try {\r\n    const { searchQuery } = req.body;\r\n    const results = await Post.find({ title: { $regex: searchQuery, $options: \"i\" } });\r\n    res.json(results);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error searching posts\", error: error });\r\n  }\r\n});\r\n\r\n// Email Notification Function\r\nasync function emailSubscribed(topic, title, email, content) {\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"your-email@gmail.com\",\r\n      pass: \"your-app-password\",\r\n    },\r\n  });\r\n\r\n  const htmlTemplate = `<h1>New post on \"${topic}\"</h1><h4>${title}</h4><p>${content}...</p><a href=\"http://localhost:3000/\">Read more</a>`;\r\n\r\n  const mailOptions = {\r\n    from: \"your-email@gmail.com\",\r\n    to: email,\r\n    subject: \"New post on subscribed topic \" + topic,\r\n    html: htmlTemplate,\r\n  };\r\n\r\n  transporter.sendMail(mailOptions, function (error, info) {\r\n    if (error) {\r\n      console.log(error);\r\n    } else {\r\n      console.log(\"Email sent: \" + info.response);\r\n    }\r\n  });\r\n}\r\n\r\n// Generate AI-based Reply\r\napp.post(\"/api/generate-reply\", async (req, res) => {\r\n  try {\r\n    const { post } = req.body;\r\n    const messages = [\r\n      { role: \"system\", content: \"You are a reply generator.\" },\r\n      {\r\n        role: \"user\",\r\n        content: `Generate a reply in 10 words for post title: ${post.title}\\n\\n and content: ${post.body}`,\r\n      },\r\n    ];\r\n\r\n    const response = await openai.chat.completions.create({\r\n      model: \"gpt-3.5-turbo-16k\",\r\n      messages: messages,\r\n      max_tokens: 30,\r\n      temperature: 0.5,\r\n      top_p: 1,\r\n    });\r\n\r\n    const generatedReply = response.choices[0].message.content;\r\n    res.json({ generatedReply });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n});\r\n\r\n// Start the Express server\r\nconst port = 5000;\r\napp.listen(port, () => {\r\n  console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}